from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from pydantic import BaseModel
from transformers import pipeline
from typing import List
import requests
import uvicorn

# Initialize the FastAPI app
app = FastAPI()

# Load the AI model (using GPT-2 for demonstration)
try:
    model = pipeline("text-generation", model="gpt2")
except Exception as e:
    print("Error loading the model:", e)
    model = None

# Define the request structure
class ChatRequest(BaseModel):
    agent: str
    prompt: str
    temperature: float = 0.7
    max_tokens: int = 150

# In-memory storage for agents and sessions
class Agent:
    def __init__(self, name: str):
        self.name = name
        self.conversations = []

agents = {}

# Function to fetch top coins on Solana
def fetch_solana_top_coins():
    try:
        response = requests.get("https://api.coingecko.com/api/v3/coins/markets", params={
            "vs_currency": "usd",
            "category": "solana-ecosystem",
            "order": "market_cap_desc",
            "per_page": 10,
            "page": 1,
            "sparkline": False
        })
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print("Error fetching Solana coins:", e)
        return []

# Endpoint to handle chat requests
@app.post("/chat")
async def chat(request: ChatRequest):
    if not model:
        raise HTTPException(status_code=500, detail="AI model not loaded.")

    if request.agent not in agents:
        raise HTTPException(status_code=404, detail="Agent not found.")

    try:
        response = model(
            request.prompt,
            max_length=request.max_tokens,
            temperature=request.temperature
        )
        agents[request.agent].conversations.append({"prompt": request.prompt, "response": response[0]['generated_text']})
        return {"agent": request.agent, "response": response[0]['generated_text']}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating response: {e}")

# Endpoint to create a new agent
@app.post("/create-agent")
async def create_agent(name: str):
    if name in agents:
        raise HTTPException(status_code=400, detail="Agent already exists.")
    agents[name] = Agent(name)
    return {"message": f"Agent '{name}' created successfully."}

# Endpoint to list all agents
@app.get("/list-agents")
async def list_agents():
    return {"agents": list(agents.keys())}

# Endpoint to fetch top Solana coins
@app.get("/solana-top-coins")
async def solana_top_coins():
    coins = fetch_solana_top_coins()
    if not coins:
        raise HTTPException(status_code=500, detail="Unable to fetch Solana coins.")
    return {"top_coins": coins}

# WebSocket endpoint for real-time communication
@app.websocket("/ws/{agent_name}")
async def websocket_endpoint(websocket: WebSocket, agent_name: str):
    await websocket.accept()
    if agent_name not in agents:
        await websocket.close()
        return
    try:
        while True:
            data = await websocket.receive_text()
            response = model(data, max_length=150, temperature=0.7)
            agents[agent_name].conversations.append({"prompt": data, "response": response[0]['generated_text']})
            await websocket.send_text(response[0]['generated_text'])
    except WebSocketDisconnect:
        print(f"WebSocket connection with {agent_name} closed.")

# Root endpoint
@app.get("/")
async def root():
    return {"message": "Welcome to the Enhanced AI Chat System API!"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
